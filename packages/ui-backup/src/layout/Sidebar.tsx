// Auto-generated by Figma Make â€” version: v1.0.0
"use client";

import * as React from "react";
import { cn } from "../utils/cn";

export interface SidebarNavItem {
  id: string;
  label: string;
  icon?: React.ReactNode;
  badge?: number | string;
  onClick?: () => void;
  disabled?: boolean;
}

export interface SidebarNavGroup {
  label?: string;
  items: SidebarNavItem[];
}

export interface SidebarProps {
  /** Navigation groups */
  navigation?: SidebarNavGroup[];
  /** Currently active item ID */
  activeItem?: string;
  /** Collapsed state */
  collapsed?: boolean;
  /** Collapse toggle handler */
  onToggleCollapse?: () => void;
  /** Custom className */
  className?: string;
  /** Show on mobile */
  showOnMobile?: boolean;
  /** Mobile overlay click handler */
  onMobileOverlayClick?: () => void;
}

export const Sidebar = React.forwardRef<HTMLElement, SidebarProps>(
  (
    {
      navigation = [],
      activeItem,
      collapsed = false,
      onToggleCollapse,
      className,
      showOnMobile = false,
      onMobileOverlayClick,
    },
    ref
  ) => {
    return (
      <>
        {/* Mobile Overlay */}
        {showOnMobile && (
          <div
            className="fixed inset-0 z-40 bg-background/80 backdrop-blur-sm md:hidden"
            onClick={onMobileOverlayClick}
            aria-hidden="true"
          />
        )}

        {/* Sidebar */}
        <aside
          ref={ref}
          data-slot="sidebar"
          data-collapsed={collapsed}
          className={cn(
            "fixed top-14 md:top-16 bottom-0 left-0 z-40",
            "bg-sidebar border-r border-sidebar-border",
            "transition-all duration-300",
            collapsed
              ? "w-[72px]"
              : "w-[280px] md:w-[240px]",
            // Mobile behavior
            showOnMobile
              ? "translate-x-0"
              : "-translate-x-full md:translate-x-0",
            className
          )}
        >
          <div className="h-full flex flex-col overflow-hidden">
            {/* Scrollable Navigation */}
            <nav className="flex-1 overflow-y-auto scrollbar-thin px-3 py-4">
              <div className="space-y-6">
                {navigation.map((group, groupIndex) => (
                  <div key={groupIndex} className="space-y-1">
                    {/* Group Label */}
                    {group.label && !collapsed && (
                      <div className="px-3 py-2 text-xs font-medium text-muted-foreground uppercase tracking-wider">
                        {group.label}
                      </div>
                    )}

                    {/* Group Items */}
                    {group.items.map((item) => {
                      const isActive = item.id === activeItem;
                      
                      return (
                        <button
                          key={item.id}
                          onClick={item.onClick}
                          disabled={item.disabled}
                          className={cn(
                            "w-full flex items-center gap-3 px-3 py-2.5 rounded-lg",
                            "transition-all duration-200",
                            "focus:outline-none focus:ring-2 focus:ring-ring/20",
                            isActive
                              ? "bg-sidebar-primary text-sidebar-primary-foreground shadow-sm"
                              : "text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
                            item.disabled && "opacity-50 cursor-not-allowed",
                            collapsed && "justify-center"
                          )}
                          aria-label={item.label}
                          title={collapsed ? item.label : undefined}
                        >
                          {/* Icon */}
                          {item.icon && (
                            <span className="flex-shrink-0 w-5 h-5">
                              {item.icon}
                            </span>
                          )}

                          {/* Label */}
                          {!collapsed && (
                            <span className="flex-1 text-left text-sm font-medium truncate">
                              {item.label}
                            </span>
                          )}

                          {/* Badge */}
                          {item.badge && !collapsed && (
                            <span
                              className={cn(
                                "flex items-center justify-center min-w-[20px] h-5 px-1.5 rounded-full text-xs font-medium",
                                isActive
                                  ? "bg-sidebar-primary-foreground/20 text-sidebar-primary-foreground"
                                  : "bg-primary/10 text-primary"
                              )}
                            >
                              {item.badge}
                            </span>
                          )}
                        </button>
                      );
                    })}
                  </div>
                ))}
              </div>
            </nav>

            {/* Collapse Toggle Button */}
            {onToggleCollapse && (
              <div className="p-3 border-t border-sidebar-border hidden md:block">
                <button
                  onClick={onToggleCollapse}
                  className={cn(
                    "w-full flex items-center gap-3 px-3 py-2.5 rounded-lg",
                    "text-sidebar-foreground hover:bg-sidebar-accent",
                    "transition-all duration-200",
                    collapsed && "justify-center"
                  )}
                  aria-label={collapsed ? "Expand sidebar" : "Collapse sidebar"}
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="18"
                    height="18"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    className={cn(
                      "transition-transform duration-200",
                      collapsed && "rotate-180"
                    )}
                  >
                    <path d="m15 18-6-6 6-6" />
                  </svg>
                  {!collapsed && (
                    <span className="text-sm font-medium">Collapse</span>
                  )}
                </button>
              </div>
            )}
          </div>
        </aside>
      </>
    );
  }
);

Sidebar.displayName = "Sidebar";
