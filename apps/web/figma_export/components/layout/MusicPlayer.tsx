// Auto-generated by Figma Make â€” version: v1.0.0
"use client";

import * as React from "react";
import { cn } from "../ui/utils";

export interface Track {
  id: string;
  title: string;
  artist: string;
  album?: string;
  coverArt?: string;
  duration?: number;
}

export interface MusicPlayerProps {
  /** Current track */
  currentTrack?: Track;
  /** Playing state */
  isPlaying?: boolean;
  /** Current time in seconds */
  currentTime?: number;
  /** Volume (0-1) */
  volume?: number;
  /** Muted state */
  isMuted?: boolean;
  /** Shuffle enabled */
  isShuffled?: boolean;
  /** Repeat mode: off, one, all */
  repeatMode?: 'off' | 'one' | 'all';
  /** Play/Pause handler */
  onPlayPause?: () => void;
  /** Next track handler */
  onNext?: () => void;
  /** Previous track handler */
  onPrevious?: () => void;
  /** Seek handler */
  onSeek?: (time: number) => void;
  /** Volume change handler */
  onVolumeChange?: (volume: number) => void;
  /** Mute toggle handler */
  onMuteToggle?: () => void;
  /** Shuffle toggle handler */
  onShuffleToggle?: () => void;
  /** Repeat toggle handler */
  onRepeatToggle?: () => void;
  /** Custom className */
  className?: string;
  /** Compact mode for mobile */
  compact?: boolean;
}

export const MusicPlayer = React.forwardRef<HTMLElement, MusicPlayerProps>(
  (
    {
      currentTrack,
      isPlaying = false,
      currentTime = 0,
      volume = 1,
      isMuted = false,
      isShuffled = false,
      repeatMode = 'off',
      onPlayPause,
      onNext,
      onPrevious,
      onSeek,
      onVolumeChange,
      onMuteToggle,
      onShuffleToggle,
      onRepeatToggle,
      className,
      compact = false,
    },
    ref
  ) => {
    const formatTime = (seconds: number) => {
      const mins = Math.floor(seconds / 60);
      const secs = Math.floor(seconds % 60);
      return `${mins}:${secs.toString().padStart(2, '0')}`;
    };

    const progressPercentage = currentTrack?.duration
      ? (currentTime / currentTrack.duration) * 100
      : 0;

    return (
      <footer
        ref={ref}
        data-slot="music-player"
        className={cn(
          "fixed bottom-0 left-0 right-0 z-30",
          "h-20 md:h-24",
          "bg-card border-t border-border",
          className
        )}
      >
        <div className="h-full px-4 md:px-6 flex items-center gap-4">
          {/* LEFT - Track Info */}
          <div className={cn(
            "flex items-center gap-3 min-w-0",
            compact ? "flex-1" : "w-1/4"
          )}>
            {currentTrack?.coverArt && (
              <div className="flex-shrink-0 w-12 h-12 md:w-14 md:h-14 rounded-md overflow-hidden bg-muted">
                <img
                  src={currentTrack.coverArt}
                  alt={currentTrack.title}
                  className="w-full h-full object-cover"
                />
              </div>
            )}
            
            {currentTrack && !compact && (
              <div className="min-w-0 flex-1">
                <div className="font-medium text-sm md:text-base truncate">
                  {currentTrack.title}
                </div>
                <div className="text-xs md:text-sm text-muted-foreground truncate">
                  {currentTrack.artist}
                </div>
              </div>
            )}
          </div>

          {/* CENTER - Controls */}
          <div className={cn(
            "flex flex-col items-center gap-2",
            compact ? "flex-1" : "flex-1 max-w-2xl"
          )}>
            {/* Control Buttons */}
            <div className="flex items-center gap-2 md:gap-4">
              {/* Shuffle */}
              {!compact && onShuffleToggle && (
                <button
                  onClick={onShuffleToggle}
                  className={cn(
                    "p-2 rounded-md transition-all",
                    isShuffled
                      ? "text-primary hover:text-primary/80"
                      : "text-muted-foreground hover:text-foreground"
                  )}
                  aria-label="Toggle shuffle"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <path d="m18 14 3-3-3-3" />
                    <path d="m18 20 3-3-3-3" />
                    <path d="M3 18h3a3 3 0 0 0 3-3V9a3 3 0 0 1 3-3h9" />
                    <path d="M3 6h3a3 3 0 0 1 3 3v6a3 3 0 0 0 3 3h9" />
                  </svg>
                </button>
              )}

              {/* Previous */}
              {onPrevious && (
                <button
                  onClick={onPrevious}
                  className="p-2 text-foreground hover:text-primary transition-all"
                  aria-label="Previous track"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="20"
                    height="20"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <polygon points="19 20 9 12 19 4 19 20" />
                    <line x1="5" x2="5" y1="19" y2="5" />
                  </svg>
                </button>
              )}

              {/* Play/Pause */}
              {onPlayPause && (
                <button
                  onClick={onPlayPause}
                  className="flex items-center justify-center w-10 h-10 md:w-12 md:h-12 rounded-full bg-primary text-primary-foreground hover:bg-primary/90 transition-all shadow-lg hover:shadow-xl hover:scale-105"
                  aria-label={isPlaying ? "Pause" : "Play"}
                >
                  {isPlaying ? (
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="20"
                      height="20"
                      viewBox="0 0 24 24"
                      fill="currentColor"
                      stroke="none"
                    >
                      <rect x="6" y="4" width="4" height="16" />
                      <rect x="14" y="4" width="4" height="16" />
                    </svg>
                  ) : (
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="20"
                      height="20"
                      viewBox="0 0 24 24"
                      fill="currentColor"
                      stroke="none"
                    >
                      <polygon points="5 3 19 12 5 21 5 3" />
                    </svg>
                  )}
                </button>
              )}

              {/* Next */}
              {onNext && (
                <button
                  onClick={onNext}
                  className="p-2 text-foreground hover:text-primary transition-all"
                  aria-label="Next track"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="20"
                    height="20"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <polygon points="5 4 15 12 5 20 5 4" />
                    <line x1="19" x2="19" y1="5" y2="19" />
                  </svg>
                </button>
              )}

              {/* Repeat */}
              {!compact && onRepeatToggle && (
                <button
                  onClick={onRepeatToggle}
                  className={cn(
                    "p-2 rounded-md transition-all relative",
                    repeatMode !== 'off'
                      ? "text-primary hover:text-primary/80"
                      : "text-muted-foreground hover:text-foreground"
                  )}
                  aria-label="Toggle repeat"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <path d="m17 2 4 4-4 4" />
                    <path d="M3 11v-1a4 4 0 0 1 4-4h14" />
                    <path d="m7 22-4-4 4-4" />
                    <path d="M21 13v1a4 4 0 0 1-4 4H3" />
                  </svg>
                  {repeatMode === 'one' && (
                    <span className="absolute top-0 right-0 text-[8px] font-bold">1</span>
                  )}
                </button>
              )}
            </div>

            {/* Progress Bar */}
            {!compact && currentTrack && onSeek && (
              <div className="w-full flex items-center gap-2 text-xs text-muted-foreground">
                <span className="w-10 text-right">{formatTime(currentTime)}</span>
                <div className="flex-1 h-1 bg-muted rounded-full overflow-hidden cursor-pointer">
                  <div
                    className="h-full bg-primary transition-all"
                    style={{ width: `${progressPercentage}%` }}
                  />
                </div>
                <span className="w-10">{formatTime(currentTrack.duration || 0)}</span>
              </div>
            )}
          </div>

          {/* RIGHT - Volume */}
          {!compact && (
            <div className="hidden md:flex items-center gap-2 w-1/4 justify-end">
              {onMuteToggle && (
                <button
                  onClick={onMuteToggle}
                  className="p-2 text-muted-foreground hover:text-foreground transition-all"
                  aria-label={isMuted ? "Unmute" : "Mute"}
                >
                  {isMuted || volume === 0 ? (
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="18"
                      height="18"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    >
                      <path d="M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z" />
                      <line x1="22" x2="16" y1="9" y2="15" />
                      <line x1="16" x2="22" y1="9" y2="15" />
                    </svg>
                  ) : (
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="18"
                      height="18"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    >
                      <path d="M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z" />
                      <path d="M16 9a5 5 0 0 1 0 6" />
                      <path d="M19.364 18.364a9 9 0 0 0 0-12.728" />
                    </svg>
                  )}
                </button>
              )}
              
              {onVolumeChange && (
                <div className="w-24 h-1 bg-muted rounded-full overflow-hidden cursor-pointer">
                  <div
                    className="h-full bg-primary transition-all"
                    style={{ width: `${volume * 100}%` }}
                  />
                </div>
              )}
            </div>
          )}
        </div>
      </footer>
    );
  }
);

MusicPlayer.displayName = "MusicPlayer";
