// Auto-generated by Figma Make â€” version: v1.0.0
"use client";

import * as React from "react";
import { cn } from "../ui/utils";

export interface NavAction {
  label: string;
  icon?: React.ReactNode;
  onClick?: () => void;
  badge?: number;
  variant?: 'default' | 'primary' | 'ghost';
}

export interface UserMenuItem {
  type: 'item' | 'separator' | 'label';
  label?: string;
  icon?: React.ReactNode;
  onClick?: () => void;
  variant?: 'default' | 'destructive';
}

export interface TopNavBarProps {
  /** Logo image source or React element */
  logo?: string | React.ReactNode;
  /** Alt text for logo image */
  logoAlt?: string;
  /** Callback when logo is clicked */
  onLogoClick?: () => void;
  /** Search placeholder text */
  searchPlaceholder?: string;
  /** Search value (controlled) */
  searchValue?: string;
  /** Search change handler */
  onSearchChange?: (value: string) => void;
  /** Search submit handler */
  onSearchSubmit?: (value: string) => void;
  /** Action buttons in the right section */
  actions?: NavAction[];
  /** User avatar URL */
  userAvatar?: string;
  /** User display name */
  userName?: string;
  /** User email */
  userEmail?: string;
  /** User menu items */
  userMenuItems?: UserMenuItem[];
  /** Custom className */
  className?: string;
  /** Mobile menu toggle handler */
  onMenuToggle?: () => void;
  /** Theme toggle handler */
  onThemeToggle?: () => void;
  /** Current theme */
  theme?: 'light' | 'dark';
  /** Hide search on mobile */
  hideSearchOnMobile?: boolean;
}

export const TopNavBar = React.forwardRef<HTMLElement, TopNavBarProps>(
  (
    {
      logo,
      logoAlt = "Logo",
      onLogoClick,
      searchPlaceholder = "Search...",
      searchValue,
      onSearchChange,
      onSearchSubmit,
      actions = [],
      userAvatar,
      userName,
      userEmail,
      userMenuItems = [],
      className,
      onMenuToggle,
      onThemeToggle,
      theme = 'light',
      hideSearchOnMobile = false,
    },
    ref
  ) => {
    const [internalSearchValue, setInternalSearchValue] = React.useState("");
    const [searchFocused, setSearchFocused] = React.useState(false);

    const currentSearchValue = searchValue ?? internalSearchValue;

    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
      const value = e.target.value;
      setInternalSearchValue(value);
      onSearchChange?.(value);
    };

    const handleSearchSubmit = (e: React.FormEvent) => {
      e.preventDefault();
      onSearchSubmit?.(currentSearchValue);
    };

    const renderLogo = () => {
      if (typeof logo === 'string') {
        return (
          <img
            src={logo}
            alt={logoAlt}
            className="h-10 w-auto object-contain"
          />
        );
      }
      return logo;
    };

    return (
      <nav
        ref={ref}
        data-slot="topnav"
        className={cn(
          "fixed top-0 left-0 right-0 z-50 h-14 md:h-16",
          className
        )}
      >
        {/* Frosted glass background */}
        <div className="absolute inset-0 bg-background/80 backdrop-blur-xl border-b border-border/50" />

        {/* Main nav content */}
        <div className="relative h-full px-4 md:px-6 flex items-center justify-between gap-3 md:gap-6">
          {/* LEFT SECTION */}
          <div className="flex items-center gap-4 min-w-0 flex-shrink-0">
            {/* Menu Toggle */}
            {onMenuToggle && (
              <button
                onClick={onMenuToggle}
                className="text-muted-foreground hover:text-foreground hover:bg-secondary/50 transition-all p-2 rounded-md"
                aria-label="Toggle menu"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="20"
                  height="20"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <line x1="4" x2="20" y1="12" y2="12" />
                  <line x1="4" x2="20" y1="6" y2="6" />
                  <line x1="4" x2="20" y1="18" y2="18" />
                </svg>
              </button>
            )}

            {/* Logo */}
            {logo && (
              <button
                onClick={onLogoClick}
                className="hidden sm:flex items-center group transition-all hover:scale-105"
                aria-label="Home"
              >
                {renderLogo()}
              </button>
            )}
          </div>

          {/* CENTER SECTION - Search */}
          {!hideSearchOnMobile && (
            <form
              onSubmit={handleSearchSubmit}
              className={cn(
                "flex-1 max-w-xl mx-auto",
                hideSearchOnMobile && "hidden md:flex"
              )}
            >
              <div className="relative w-full">
                <input
                  type="text"
                  placeholder={searchPlaceholder}
                  value={currentSearchValue}
                  onChange={handleSearchChange}
                  onFocus={() => setSearchFocused(true)}
                  onBlur={() => setSearchFocused(false)}
                  className={cn(
                    "w-full h-9 md:h-10 pl-10 pr-4 rounded-lg",
                    "bg-secondary/50 border border-border/50",
                    "text-foreground placeholder:text-muted-foreground",
                    "transition-all duration-200",
                    "focus:outline-none focus:ring-2 focus:ring-ring/20 focus:border-ring",
                    searchFocused && "bg-card"
                  )}
                />
                <svg
                  className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground"
                  xmlns="http://www.w3.org/2000/svg"
                  width="20"
                  height="20"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <circle cx="11" cy="11" r="8" />
                  <path d="m21 21-4.3-4.3" />
                </svg>
              </div>
            </form>
          )}

          {/* RIGHT SECTION - Actions & User */}
          <div className="flex items-center gap-2 md:gap-3">
            {/* Theme Toggle */}
            {onThemeToggle && (
              <button
                onClick={onThemeToggle}
                className="p-2 rounded-md text-muted-foreground hover:text-foreground hover:bg-secondary/50 transition-all"
                aria-label="Toggle theme"
              >
                {theme === 'light' ? (
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="18"
                    height="18"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z" />
                  </svg>
                ) : (
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="18"
                    height="18"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <circle cx="12" cy="12" r="4" />
                    <path d="M12 2v2" />
                    <path d="M12 20v2" />
                    <path d="m4.93 4.93 1.41 1.41" />
                    <path d="m17.66 17.66 1.41 1.41" />
                    <path d="M2 12h2" />
                    <path d="M20 12h2" />
                    <path d="m6.34 17.66-1.41 1.41" />
                    <path d="m19.07 4.93-1.41 1.41" />
                  </svg>
                )}
              </button>
            )}

            {/* Action Buttons */}
            {actions.map((action, index) => (
              <button
                key={index}
                onClick={action.onClick}
                className={cn(
                  "relative p-2 rounded-md transition-all",
                  action.variant === 'primary'
                    ? "bg-primary text-primary-foreground hover:bg-primary/90"
                    : "text-muted-foreground hover:text-foreground hover:bg-secondary/50"
                )}
                aria-label={action.label}
              >
                {action.icon}
                {action.badge !== undefined && action.badge > 0 && (
                  <span className="absolute -top-0.5 -right-0.5 flex items-center justify-center min-w-[18px] h-[18px] px-1 text-xs font-medium text-white bg-destructive rounded-full">
                    {action.badge > 9 ? '9+' : action.badge}
                  </span>
                )}
              </button>
            ))}

            {/* User Avatar (placeholder for dropdown) */}
            {userAvatar && (
              <div className="relative">
                <button
                  className="flex items-center gap-2 p-1 rounded-full hover:bg-secondary/50 transition-all"
                  aria-label="User menu"
                >
                  <div className="w-8 h-8 rounded-full bg-primary/10 overflow-hidden">
                    <img
                      src={userAvatar}
                      alt={userName || 'User'}
                      className="w-full h-full object-cover"
                    />
                  </div>
                </button>
              </div>
            )}
          </div>
        </div>
      </nav>
    );
  }
);

TopNavBar.displayName = "TopNavBar";
